import json
import random
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import aiosqlite

TOKEN = "8179513289:AAE89mACc9yUr4cgg1lq3NMsuoG10EkqisU"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö JSON
with open('recycling_data.json', 'r', encoding='utf-8') as file:
    recycling_data = json.load(file)

# –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–≤—ã—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –ø—Ä–∏–º–µ—Ä–Ω–æ 12-—è —Å—Ç—Ä–æ–∫–∞)
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_menu_buttons = [
        ["üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "üîé –£–∑–Ω–∞—Ç—å –æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ"],
        ["üìö –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞–º", "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"]
    ]
    reply_markup = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True)
    await update.message.reply_text(
        "‚ôªÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–∫–æ–°–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update, context)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    marking = " ".join(context.args).strip().upper()
    if marking in recycling_data:
        data = recycling_data[marking]
        response = f"‚ôªÔ∏è **{marking} ‚Äî {data['description']}**\n\n"
        response += "‚úÖ **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è:**\n- " + "\n- ".join(data['accepted']) + "\n\n"
        response += "‚ùå **–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è:**\n- " + "\n- ".join(data['not_accepted']) + "\n\n"
        response += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n- " + "\n- ".join(data['important'])
    else:
        response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∞–∫–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ."

    await update.message.reply_text(response, parse_mode='Markdown')

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with aiosqlite.connect('eco_bot.db') as db:
        cursor = await db.execute('SELECT * FROM questions ORDER BY RANDOM() LIMIT 1')
        question = await cursor.fetchone()

    correct_answer = question[2]
    wrong_answers = question[3].split(';')

    options = wrong_answers + [correct_answer, "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    random.shuffle(options)

    context.user_data['correct_answer'] = correct_answer

    await update.message.reply_text(
        question[1],
        reply_markup=ReplyKeyboardMarkup([options], one_time_keyboard=True, resize_keyboard=True)
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_answer = update.message.text
    correct_answer = context.user_data.get('correct_answer')

    if user_answer == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return

    async with aiosqlite.connect('eco_bot.db') as db:
        if user_answer == correct_answer:
            await update.message.reply_text("üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –±–∞–ª–ª.", reply_markup=ReplyKeyboardRemove())
            user_id = update.message.from_user.id
            username = update.message.from_user.username
            await db.execute(
                'INSERT OR IGNORE INTO users (user_id, username, score) VALUES (?, ?, 0)', 
                (user_id, username)
            )
            await db.execute('UPDATE users SET score = score + 1 WHERE user_id = ?', (user_id,))
            await db.commit()
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", reply_markup=ReplyKeyboardRemove())

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with aiosqlite.connect('eco_bot.db') as db:
        cursor = await db.execute('SELECT username, score FROM users ORDER BY score DESC LIMIT 10')
        top_users = await cursor.fetchall()

    leaderboard_text = "üèÜ **–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:**\n"
    for i, (username, score) in enumerate(top_users, start=1):
        leaderboard_text += f"{i}. @{username or '–∞–Ω–æ–Ω–∏–º'} ‚Äî {score} –±–∞–ª–ª–æ–≤\n"

    markup = ReplyKeyboardMarkup([["‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    await update.message.reply_text(leaderboard_text, reply_markup=markup, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "üìå **–®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞–º:**\n\n"
    for marking, data in recycling_data.items():
        help_text += f"**{marking}** ‚Äî {data['description']}\n"
    markup = ReplyKeyboardMarkup([["‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)
    await update.message.reply_text(help_text, reply_markup=markup, parse_mode='Markdown')

async def handle_main_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        await quiz(update, context)
    elif text == "üîé –£–∑–Ω–∞—Ç—å –æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ":
        await prompt_info(update, context)
    elif text == "üìö –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞–º":
        await help_command(update, context)
    elif text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await leaderboard(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

async def prompt_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    markup = ReplyKeyboardMarkup(
        [["01 PET", "02 HDPE", "04 LDPE"], ["05 PP", "07 OTHER", "40 FE"], ["‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)

async def handle_marking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    marking = update.message.text.strip().upper()

    if marking == "‚Ü©Ô∏è –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ":
        await show_main_menu(update, context)
        return

    if marking in recycling_data:
        data = recycling_data[marking]
        response = f"‚ôªÔ∏è **{marking} ‚Äî {data['description']}**\n\n"
        response += "‚úÖ **–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è:**\n- " + "\n- ".join(data['accepted']) + "\n\n"
        response += "‚ùå **–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è:**\n- " + "\n- ".join(data['not_accepted']) + "\n\n"
        response += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n- " + "\n- ".join(data['important'])
    else:
        response = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∞–∫–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ."

    await update.message.reply_text(response, parse_mode='Markdown')

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("help", help_command))

    app.add_handler(MessageHandler(filters.Regex('^(üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç|üîé –£–∑–Ω–∞—Ç—å –æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ|üìö –®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞–º|üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)$'), handle_main_menu_buttons))
    app.add_handler(MessageHandler(filters.Regex('^‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu))
    app.add_handler(MessageHandler(filters.Regex(r'^\d{2}\s?[A-Z]+$'), handle_marking))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_answer))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
